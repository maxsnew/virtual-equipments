----------------------- REVIEW 1 ---------------------
SUBMISSION: 67
TITLE: A Formal Logic for Formal Category Theory
AUTHORS: Max New and Daniel R. Licata

----------- Overall evaluation -----------
This paper presents a formal syntax for virtual equipments. These are an
axiomatization of the situation of categories/functors/profunctors (which
themselves are the categorical version of sets/functions/relations - all this
comes from a subject known as "formal category theory".)

The paper presents a 2-level syntax:
- In the outer level, one can construct categories - including categories of
  presheaves - in the usual way.
- In the inner level, one can construct functors, profunctors, and natural
  transformations over these categories.

Because such constructions require care in the use of variables (e.g.
covariantly and contravariantly, amongst countless other scenarios), the logic
itself is noncommutative. 

The constructed syntax is nice, and feels like a very strong improvement on all
the previous work on directed type theories.

It is claimed that the syntax presented is sound and complete with respect to
virtual equipments (Section 4). Having worked in the area before I very much
believe this result, but find that the results to be poorly presented.

There is a very nice discussion of the (little) related work in this fascinating
topic at the end.

All in all this is a very strong paper that should be accepted.


## Weaknesses

It is not clear what the limits of the present formalism are.

## Larger issues

- Section 2.1: I would appreciate a more careful and detailed explanation about the
  positive and negative presheaf rules.
  - First, what is d-(Ξ) and d+(Ξ)? As far as I understand Ξ is either an object
    var, or a pair of object vars. What do those maps do in the first case?
  - Second, I would appreciate some more details in the elimination rules of the
    positive and negative presheaves. For example in the negative presheaf the
    "a" presumably needs to be contravariant in Ξ so that one can define the
    action of the presheaf. But why must the presheaf itself be positive in Ξ?
    Is that just a "rest of the context" rule?

- Section 2.2: This is very nice, but I would appreciate a bit more discussion
  about the tensor product of categories. Usually this kind of construction is a
  colimit, i.e. a quotient of a coproduct of some sort. However, there is no
  indication in the rule nor any discussion in the text stating this colimiting
  behaviour. In other words, I would expect to see something stating the
  property that "ind(x, beta, y. t; s) is not allowed to depend on the
  particular choice of beta" - or maybe that the chosen section t itself is not.
  Could you comment on this?

- I find the second half of Section 4 very confusing. While I can believe the
  overall results, there are many details in the presentation that I find
  suspect. Here are some:

  - Theorem 2 (Initiality). While I understand exactly what you mean, I have
    great trouble accepting a theorem with the phrasing "almost any choice of
    connectives" in it. I would really very strongly prefer if this bit was
    described discursively rather than claimed as a result.

  - Construction 3: What is "vDbl_r"? Presumably
    virtual-double-category-with-restrictions, but you surely mean vEq_r (in
    that case introduce the symbol). Maybe you'd like to also include one
    sentence explaining what the construction achieves.

  - Construction 4: What is "Cat_U"? Is it from a previous version of the paper
    that used Grothendieck universes instead of κ-smallness?

## Small issues

- In general the paper does not follow the good grammatical rule that compound
  adjectives should be hyphenated. I will point this out multiple times
  throughout this section, starting now:

- Abstract: "category theoretic" -> "category-theoretic"

- Introduction:
  - Maybe also cite Seely for dependent type theory?
  - "previously defined functions are known to be continuous": phrase adds nothing, delete.
  - "algebraic combinator syntax": I thought I'd seen a lot of things, but I've
    not seen this one. Care to include a reference? Also for the string
    diagrams, but the algebraic one mystifies me.


- Section 2:
  - It is somewhat difficult to read the typing judgments "type context" and
    "set context" and "trans. context" in the text; if in a hurry they are
    parsed as part of the sentence. Consider \textsf, or acronyms.
  - I am not in general the biggest fan of using both a and \alpha, as they can
    be easily confused if your sight is not perfect.
  - "context \Phi of transformation variable": pluralize
  - "well formed" -> "well-formed"

- Figure 3:
  - "Presehaf" -> "Presheaf"
  - Please be somewhat more consistent in the subscripts in the graph of the
    profunctor! Do the category annotations need to be there or not?

- Figure 4: I would use x, \beta, y. t when binding multiple variables in t, but
  that may just be me.

- Section 3
  - "well known" -> "well-known"
  - Construction 1. It would be nice if for your first example you wrote out
    everything will full annotations, just for the sake of illustration.
  - Construction 1, Composition: something went wrong there :-)
  - After construction 1 you call them reflexivity and transitivity instead of
    identity and composition. Totally fine by me, but maybe confusing to others.
  - Lemma 3, Fubini: "which are analogous to simple theorems relating tensor and
    hom types in ordered logic" citation please!

- Section 4:

  - Definition 2: 
    - maybe introduce the symbol vEq here
    - why do you keep saying virtual double categories? Just stick with
      equipments already!
    - some people are not aware of the cartesian lifts/framing, so maybe include
      a quick citation to Shulman 2007 here

  - Definition 3 and afterwards. There should at least be one comment here about
    hyperdoctrines, and in particular the lack of requirement of left and right
    adjoints to V^f. 

  - Constuction 5: citations are awful when in (double) parentheses! 

- Section 5:
  - Many instances of "type theoretic" -> "type-theoretic"

  - What is SCT? Is it maybe an older name for VETT? :-)


----------------------- REVIEW 2 ---------------------
SUBMISSION: 67
TITLE: A Formal Logic for Formal Category Theory
AUTHORS: Max New and Daniel R. Licata

----------- Overall evaluation -----------
The paper presents a logical approach to the formalization of theorems in
category theory. It introduces a particular type theory whose semantics are to
be taken in virtual equipments (an "operadic" variant of the notion of double
category). The main outcome is that most of the "routine checks" (showing
functoriality or naturality) are unnecessary when proving properties in this
type theory: they hold synthetically (by construction). The paper is quite well
written, introduces a type theory which is both interesting and useful, and it
has been tested in practice thanks to a toy implementation in Agda (which uses
rewrites rules). I am in favor of accepting it.

Some comments below.

- Some general remarks are difficult to understand, because they are quite
  allusive and not very formal. I think they should either be detailed or
  removed. The two main kinds are
  1. similarities with linear logic and
  2. the profunctorial semantics.
- A general question: suppose that I do not trust your type theory, would it be
  possible (in principle) to generate explicit proofs of functoriality /
  naturality from proofs in your type theory?
- p. 3: the reason why you have to restrict to unary functors and binary
  profunctors is not clear and should be detailed or illustrated. What goes
  wrong if we naively remove this restriction?
- p. 4: when introducing R, you write ℂᵒᵖ for the opposite category, but you use
  the notation ℂᵒ afterward. Also, you should say somewhere that ℂᵒ stands for
  the opposite category.
- p. 6, "we write Γ type context to indicate that...": the sentence is quite
  difficult to parse at first read, please add double quotes around "Γ type
  context". The next sentence is even more difficult to parse when you write
  "The set contexts Γ⊢Ξ set context, which" because you are at the same time
  referring to the context Ξ and stating that it is well-formed.
- p. 6, "where the last variable in ϕ₁ is equal to the first variable in ϕ₂":
  state that you usually leave this side condition implicit (there is nothing in
  your rules which explicitly enforces that this is the case).
- p. 7: add a horizontal line above "Γ | α : ℂ ⊢ α : ℂ" and the other rule.
- p. 7, "As in linear logic, ...": this is an example of a parallel with linear
  logic which is difficult to understand (also explicitly mention that you are
  referring to the axiom rule of LL).
- p. 7, "Semantically, this is the restriction of a profunctor": draw a
  categorical diagram and make this restriction more explicit.
- p. 8, "the additives": is this terminology referring to LL?
- p. 8, "the objects are triples": it would be better to give a name to the
  category (otherwise it feels like something is missing in the sentence) and
  say "the objects *of ∫P* are triples..." (and perhaps mention the name
  "category of elements").
- p. 8, "In our syntax we define it as...": the notations "ℂ₋" and "ℂ₊" are
  never formally introduced (I do not see that in fig. 2 or fig. 3)
- p. 8, "We use the notation p ∈ a for...": pleas explain the role of Ξ in the
  rule for p ∈ a (it is not clear to me).
- p. 8, "we can use a term of s : a →ℂ b": explain the notation a →ℂ b.
- p. 9, figure 3:
  - align the two rules for Unit
  - again, the notations "C₋" and "C₊" are not introduced, if they stand for
    arbitrary categories please say so, it looks like they are constructed from
    C
  - some "C" should be turned into "ℂ"
  - "Negative Presheaf": you only defined d⁻ and d⁺ on ϕ contexts not Ξ ones (in
    p. 6)
- p. 9: "α →ℂ β denotes the unit": in which sense exactly?
- p. 9, "Those familiar with linear logic...": I could not understand this
  sentence (although I am familiar with linear logic)
- p. 10: the construction "P ▹∀α Q" is the most unusual one (at least for me)
  and should be better explained. I had hard times to understand what it
  does. Also, an explicit formula for the counterpart of this operation on
  profunctors would be welcome (and perhaps an example). Also, please provide
  citations about where this is introduced / used.
- p. 11, figure 4:
  - change some "D" into "boldfont D" (easychair does not accept the symbol)
  - change "P ⊙∃β:D Q" into "P ⊙∃β Q"
  - change "P ▹∀α:ℂ Q" into "P ▹∀α Q"
- p. 12, Construction 1: I was fine with Identity, but I had trouble
  understanding composition already
  - first, the second "α₁ → α₂" should be changed to "α₂ → α₃"
  - state explicitly that ▹ is right-associative (or add parenthesis)
  - more importantly, I am not sure I understand the construction "P ▹∀α Q". The
    rule seems to state that α should occur covariantly both in P and Q, but in
    the formula for composition it seems that α₂ ooccurs both covariantly and
    contravariantly (in "α₂ → α₃") what am I missing here? Perhaps should
    exchange the quantifications on α₁ and α₂ (so that α₂ gets a ∀ and α₁ gets
    a ▹)? But I am not sure that this is a solution or an accurate understanding
    of things because the same problem occurs in "Prounctorality" below it
    seems...
  - What is exactly the difference between ∀ and ▹. For instance, what is the
    difference if we phrase Functoriality as "∀α₂. α₁ → α₂ ∀α₁◃ F(α₁) → F(α₂)"?
- p. 12, Lemma 1: state "α₁:ℂ" and "α₂:ℂ" in the context (add the ":ℂ")
- p. 12, "For instance, the Yoneda lemma generalizes the equivalence...": I
  could not understand this (x is bound in the formula on the left
  (∀x.∀y.x=y⇒Py) and free on the right (Px) for instance). Are you referring to
  the fact that equality can be defined Leibniz style by x=y meaning
  "∀P.P(y)⇒P(x)"?
- p. 12, Lemma 2: add parenthesis around "p ∋ α'" (the priority is not clear)
- p. 15, "In the presence of restrictions, every 2-cell": please provide a
  precise statement for this theory (as an equivalence between something like
  split VE and unitless operads), as well as a reference.
- p. 15, p. 16: the initiality theorem is very sketchy here. Could this be (or
  has it been) Agda'ed?


----------------------- REVIEW 3 ---------------------
SUBMISSION: 67
TITLE: A Formal Logic for Formal Category Theory
AUTHORS: Max New and Daniel R. Licata

----------- Overall evaluation -----------
==== Summary ====

The paper presents an extension of type theory called Virtual Equipment Type Theory (VETT). VETT is an extension of type theory with special sorts for categories, functors, transformations, and profunctors. As such, one can abstractly reason about constructs in category theory.

The paper proceeds as follows. First, the syntax of VETT is introduced, and it is compared to higher-order logic with the main observation being that profunctors are like proof relevant relations of categories. After that, the authors show how VETT can be used by proving established theorems from category theory, such as the Yoneda lemma and the characterization of adjunctions via homsets. In the fourth section, the semantics of VETT is discussed. It is shown that every category with families together with a contravariant functor from the category of contexts to the category of virtual equipments gives rise to a model of VETT. Initiality of the syntax is proven as well. The authors also construct two concrete models of VETT: one using categories and one using enriched categories.

The motivation given in the paper for this endeavor, is as follows:
- Some category-theoretic arguments are 'objectively' complex due to the high amount of functoriality and naturality side-conditions (paragraph 2 of introduction). This is illustrated using adjunctions
- One can deal with these complexities by using 2-categorical notions, which is illustrated by formal category theory (paragraph 3 of introduction). This is analogous to analysis where one avoids proving every continuity requirement using syntactical principles.
- This paper deals with the aforementioned complexities syntactically, and that is why they introduce VETT.

While I do think this work is interesting, I am not convinced by this motivation, and in my opinion, dealing with functoriality and naturality conditions, is not an interesting application of this work. My reasoning is as follows:

- I don't think that it is fair to call some arguments in category theory 'objectively' complex due to the high amount of functoriality/naturality side conditions.

Having numerous side conditions in proofs is very common in mathematics, and not unique to category. When dealing with quotients, one needs check for well-definedness, and to construct a ring homomorphism, one needs to check preservation of addition, multiplication, and the multiplicative unit.

In addition, the example that illustrates this point (constructing adjunctions by giving the functors and natural transformations) is not convincing. That is because there are alternative methods available, like universal arrows, that provide a way of dealing with these side-conditions. As such, in this case, the high amount of side conditions seems to come from taking the 'wrong' approach to deal with a specific problem.

- Domain-specific theories are not necessary to deal with such syntactical proofs.

If one composes natural transformations, one does not need to reprove the naturality every time, even if one does not have a domain-specific syntax for the constructions. As such, VETT is not necessary to reduce the number of functoriality/naturality side conditions in proofs. 

For me, the first four paragraphs of the introduction would be more convincing if it were structured as follows:
- There are many applications of both category theory and enriched category theory to programming languages. These also come up in the mechanization of certain proofs.
- As such, we want to have a suitable interface that allows us to deal uniformly with constructions in both category theory and enriched category theory. This way we can avoid having to formalizing theorems for both categories and enriched categories.
- This is what VETT does.

I think that this way, you could also strengthen the statement "Additionally, VETT may serve as the basis of a future domain specific proof assistant for category theoretic proofs" (first paragraph on page 4). The current formulation suggests that VETT would only be useful if one wants to extend proof assistants. However, VETT could also offer advantages for designing interfaces of libraries about category theory. 

==== Judgment ====

The work in this paper is interesting, and it is technically sound. However, I think that some improvements can be made in the introduction of the work (mentioned before). For that reason, I recommend 'weak accept'.

==== Minor comments ====

- "While in some ways this could be remedied by better introductory materials" (page 1). I think it is better to remove this sentence. It is rather indirect criticism on works by others (like the books by Awodey, MacLane, Riehl, and more) without providing any reason for it and explaining what 'better' means in this case. 

- Page 3, paragraph 2: I think it would be good to mention "Categories with families and first-order logic with dependent sorts" by Palmgren. In this paper, hyperdoctrines over CwFs are introduced, and this definition is actually quite similar to VETT (compare your Definition 3 to page 46 in the work by Palmgren)

- Page 8 and 9: at several points C is used instead of \mathbb{C} (line 9 in the first paragraph on page 8 and the rules for the graph of profunctors on page 9). I think these should be \mathbb{C}.

- Final sentence on page 8 and 9 (Like the J elimination... which in general does not). This sentence is too long, and it would be good to split it into two.

- Personally, I am not too fond of the usage of construction environments in this paper, because it conflates specifications of constructions with the actual constructions. For example, Construction 1 is not actually a construction, because the relevant terms are not constructed in the specific environment. Instead, it is only a specification of a construction. I prefer the usage of Problems (for the specifications) and Constructions (for the actual constructions) as in "Categorical Structures for Type Theory in Univalent Foundations" by Ahrens, Lumsdaine and Voevodsky.

- Page 14, Definition 2. In the third item, you write V_o^2, and this might be read as functors from the interval 2 to V_o (see https://ncatlab.org/nlab/show/interval+category), but I don't think that is meant. It would be better to write V_o \times V_o.

- In the proofs of Lemma 3, Construction 2 and Construction 3, the word 'straightforward' is used 3 times. I suggest cutting the word 'straightforward', because it does not add anything to the paper. 

- I think that it is worth to mention the work 'Yoneda Structures from 2-toposes' by Mark Weber in Section 4, because I think that every 2-topos a la Weber gives rise to a HVE. Weber defined a notion of 2-topos, and proved that every 2-topos can be equipped with a Yoneda structure. Every Yoneda structure gives rise to a proarrow equipment (Theorem 4.3 in On the unicity of formal category theories by Di Liberti and Loregian), and proarrow equipments give rise to virtual equipments (paragraph 4 on page 5 of A Unified Framework for Generalized Multicategories by Cruttwell and Shulman).

- Another model of VETT that might be worth mentioning (either as a conjecture or a theorem): in MLTT, one can formalize the notions of category, functor, transformation, and profunctor. As such, I think that every CwF gives rise to a HVE.

- Constructions 4 and 5 should be more explicit on the relevant CwF structure, because currently, they only mention how the added connectives of VETT are interpreted. As described in the paper, the CwF should model pi-types, sigma-types, and extensional identity types. The category of contexts in such a CwF must be locally cartesian closed (Theorem 6.1 in The biequivalence of locally cartesian closed categories and Martin-Lof type theories by Clairambault and Dybjer). However, the (bi)category of categories is not locally cartesian closed: exponentials do not exists for all functors, but only Conduché functors (https://ncatlab.org/nlab/show/Conduché+functor#failure_of_local_cartesian_closedness_in_cat). As such, one does not fully model VETT if the category of contexts would be the category of categories. For that reason, I think it is good to mention explicitly what the relevant CwF structures are in Constructions 4 and 5.

- Construction 5 is currently written as if the strictification result is already proven, while it is only conjectured. As such, it would be better to either write explicitly in this construction that you assume strictification for it or to say that you only have a 'weak' model (where 'weak' refers to substitution law not holding up to equality but only up to isomorphism).

- Page 18, line 2: "Cartesian bicateogires" should be "cartesian bicategories" 

- Page 22: The last 3 rules in Figure 6 are called SetCtxForm, SetCtxMt, and SetCtxExt. I think that TransCtxForm, TransCtxMt, and TransCtxExt are more suitable, because those rules are about transformation contexts.


------------------------------------------------------
